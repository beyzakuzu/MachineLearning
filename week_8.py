# -*- coding: utf-8 -*-
"""week_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jx_i0-2FmnO6hiTtTTFeGmMtDFcCtbCV
"""

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 

from google.colab import drive 
drive.mount('/content/drive')

dataset = pd.read_csv("/content/drive/MyDrive/mushrooms.csv")

dataset.head()

dataset.isnull().sum().sum()

dataset["class"].unique()

dataset.info()

dataset.shape

sns.histplot(dataset["class"])

x = dataset.drop(["class"], axis=1)
y = dataset["class"]
x.head()

x = pd.get_dummies(x)
x.head()

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y = encoder.fit_transform(y)
print(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

x_test.shape, x_train.shape

y_test.shape, y_train.shape

from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import accuracy_score

clf_gini = DecisionTreeClassifier(criterion="gini", max_depth=3, random_state=0)

clf_gini.fit(x_train, y_train)

plt.figure(figsize=(12,8))
tree.plot_tree(clf_gini.fit(x_train,y_train))

y_pred_gini = clf_gini.predict(x_test)

y_pred_train_gini = clf_gini.predict(x_train)
y_pred_train_gini

print("model accuracy giniye g√∂re: {0:0.4f}".format(accuracy_score(y_test,y_pred_gini)))
print("training set accuracy score: {0:0.4f}".format(accuracy_score(y_train,y_pred_train_gini)))

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import f1_score

cm = confusion_matrix(y_test, y_pred_gini)
print("confusion matrix\n\n", cm)

f,ax = plt.subplots(figsize=(10,10))
sns.heatmap(cm, annot=True, linewidths=0.5, linecolor="red", fmt=".0f", ax=ax)
plt.show()
plt.savefig("confusion matrix")

print(classification_report(y_test,y_pred_gini))

f1_score= f1_score(y_test, y_pred_gini)
print("f1 score", f1_score)
